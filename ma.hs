newtype Horse = Horse [String] 

horse :: Horse
horse = Horse ["                                                      #    #     ",   
               "                                                  %%% ##   ##    ",   
               "                                              %%%%% ###%%###     ",
               "                                             %%%%% ### %%% #     ",
               "                                          %%%%%% ### %%% ###     ",
               "                                           %%%% ## %% #######    ",
               "                                          %%%%% # %% #O#####     ",
               "                                        %%%%%% # % #########     ",
               "                                       %%%%% ##### #########     ",
               "                             ###        %% ####### #########     ",
               "                    %%% ############    ########### ########     ",
               "                 %%%% ############################### #######    ",
               "               %%%%% ################################## ######   ",
               "             %%%%%% #################################### #####   ",
               "           %%%%%% #####################################  ###     ",
               "          %%%%% #######################################          ",
               "         %%%%%% ########################################         ",
               "      % %%%%%%% ########################################         ",
               "       %%%%%%%%% #######################################         ",
               "      %%%%%%%%%% ########################################        ",
               "   %%% %%%%%%%%   ###### ################################        ",
               "     %%%%%%%%      ###### #################### ##########        ",
               "  % %%%%%%%%        ####### ########### ###### ##########        ",
               "   %%%%%%%%%         #######  ########### ###### ########        ",
               "  %%%%%%%%%%          ##### ###  ######### ####### ######        ",
               "   %%%%%%%%%%          #### ##               ####### ####        ",
               "   %%%%%%%%%%%           ## #                  ##### ###         ",
               "    %%  %% % %%         # ##                      ## ###         ",
               "      %   %    %        # ###                      # ###         ",
               "                         # ###                     ## ###        ",
               "                         # ###                     ## ###        ",
               "                         # ####                   #### ##        ",
               "                        ### ###                  ##### ###       ", 
               "                       ####  ###                 ####   ##       ",
               "                      #####   ###                 ##    ##       ",
               "                     #####    ####                      ###      ", 
               "                      ##        ###                     ###      ",
               "                                 ####                     ##     ",
               "                                  ####                    ###    ",
               "                                                          ####   ",
               "                                                           ##    "]

convertString :: [String] -> String
convertString [] = []
convertString (x:xs) = x ++ "\n" ++ convertString xs

pretty :: Horse -> IO()
pretty (Horse xs) = putStrLn (convertString xs)

rotate :: [[a]] -> [[a]]
rotate ([]:_) = []
rotate xs = reverse (map head xs) : rotate (map tail xs)

transpose :: Horse -> IO()
transpose (Horse xs) = putStrLn (convertString (rotate xs))

reflect :: [[a]] -> [[a]]
reflect xs = map reverse xs

mirror :: Horse -> IO()
mirror (Horse xs) = putStrLn(convertString (reflect xs))

--integer sequences

square :: Int -> [Int]
square x = take x [y * y | y <- [1..]]

triangular :: Int -> [Int]
triangular x = take x [(y * (y + 1)) `div` 2 | y <- [1..]]

--horseSeq :: (Int -> [Int]) -> Int -> Horse -> IO()
--horseSeq f n h =

